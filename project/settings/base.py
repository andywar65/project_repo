"""
Django settings for project_repo project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

from pathlib import Path
import json

from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import gettext_lazy as _

PROJECT_DIR = Path(__file__).resolve(strict=True).parent.parent
BASE_DIR = Path(PROJECT_DIR).resolve(strict=True).parent
APPLICATION_DIR = Path(BASE_DIR).resolve(strict=True).parent

with open(APPLICATION_DIR / 'secrets.json') as f:
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets):
    '''Get the secret variable or return explicit exception.
    Thanks to twoscoopsofdjango'''
    try:
        return secrets[setting]
    except KeyError:
        error_msg = 'Set the {0} environment variable'.format(setting)
        raise ImproperlyConfigured(error_msg)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

SECRET_KEY = get_secret('SECRET_KEY')

# Application definition

INSTALLED_APPS = [
    'grappelli',
    'filebrowser',
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django.contrib.gis',
    #third party
    'captcha',
    'taggit',
    'crispy_forms',
    'treebeard',
    'private_storage',
    'rest_framework',
    'rest_framework_gis',
    'colorfield',
    #local
    'users.apps.UsersConfig',
    'pages.apps.PagesConfig',
    'blog.apps.BlogConfig',
    'accounting.apps.AccountingConfig',
    'portfolio.apps.PortfolioConfig',
    'buildings.apps.BuildingsConfig',
    'maps.apps.MapsConfig',
    'todo.apps.TodoConfig',
    #'bimblog.apps.BimblogConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [PROJECT_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'project.processors.get_global_settings',
            ],
        },
    },
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly', ],
}

STATICFILES_DIRS = [
    PROJECT_DIR / "static",
]

TAGGIT_CASE_INSENSITIVE = True

GRAPPELLI_ADMIN_TITLE = get_secret('WEBSITE_NAME')

FILEBROWSER_VERSIONS = {
    'admin_thumbnail': {'verbose_name': 'Admin Thumbnail', 'width': 60, 'height': 60, 'opts': 'crop'},
    'thumbnail': {'verbose_name': 'Thumbnail (1 col)', 'width': 60, 'height': 60, 'opts': 'crop'},
    'small': {'verbose_name': 'Small (2 col)', 'width': 140, 'height': '', 'opts': ''},
    'medium': {'verbose_name': 'Medium (4col )', 'width': 300, 'height': '', 'opts': ''},
    'big': {'verbose_name': 'Big (6 col)', 'width': 460, 'height': '', 'opts': ''},
    'large': {'verbose_name': 'Large (8 col)', 'width': 680, 'height': '', 'opts': ''},
    'wide_landscape': {'verbose_name': 'Landscape 2:1', 'width': 1600, 'height': 800, 'opts': 'crop'},
    'landscape': {'verbose_name': 'Landscape 4:3', 'width': 1280, 'height': 720, 'opts': 'crop'},
    'portrait': {'verbose_name': 'Portrait', 'width': 768, 'height': 1024, 'opts': 'crop'},
    'square': {'verbose_name': 'Square', 'width': 768, 'height': 768, 'opts': 'crop'},
    }

FETCH_EMAILS = True

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

LANGUAGE_CODE = get_secret('LANGUAGE_CODE')#'en-us'

LANGUAGES = [
    ('it', _('Italian')),
    ('de', _('German')),
    ('en', _('English')),
]

MODELTRANSLATION_TRANSLATION_FILES = (
    'portfolio.translation',
)

TIME_ZONE = get_secret('TIME_ZONE')

USE_I18N = True

USE_L10N = True

USE_TZ = True

CITY_LAT = 41.8988
CITY_LONG = 12.5451
CITY_ZOOM = 10

AUTH_USER_MODEL = 'users.User'
PROFILE_IS_TRUSTED_BY_DEFAULT = False

RECAPTCHA_TEST_MODE = False

#this is for the blog email receiver module
IMAP_HOST = get_secret('IMAP_HOST')
IMAP_USER = get_secret('IMAP_USER')
IMAP_PWD = get_secret('IMAP_PWD')
IMAP_PORT = get_secret('IMAP_PORT')
IMAP_FROM = get_secret('IMAP_FROM')

#This stuff has nothing to do with django.site
WEBSITE_NAME = get_secret('WEBSITE_NAME')
WEBSITE_ACRO = get_secret('WEBSITE_ACRO')
#footer external links
#make your own, add them in project.processors.get_global_settings
FB_LINK = get_secret('FB_LINK')
INSTA_LINK = get_secret('INSTA_LINK')
TWIT_LINK = get_secret('TWIT_LINK')
IN_LINK = get_secret('IN_LINK')
GITHUB_LINK = get_secret('GITHUB_LINK')
EXT_LINK = get_secret('EXT_LINK')
